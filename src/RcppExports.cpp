// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// KSTestC
double KSTestC(LogicalVector indexSelection, NumericVector indexMapReferenceAttribute);
RcppExport SEXP subcon_KSTestC(SEXP indexSelectionSEXP, SEXP indexMapReferenceAttributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type indexSelection(indexSelectionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type indexMapReferenceAttribute(indexMapReferenceAttributeSEXP);
    rcpp_result_gen = Rcpp::wrap(KSTestC(indexSelection, indexMapReferenceAttribute));
    return rcpp_result_gen;
END_RCPP
}
// randomSubspaceSliceC
LogicalVector randomSubspaceSliceC(NumericMatrix indexMap, NumericVector subspace, double alpha, int referenceDim);
RcppExport SEXP subcon_randomSubspaceSliceC(SEXP indexMapSEXP, SEXP subspaceSEXP, SEXP alphaSEXP, SEXP referenceDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subspace(subspaceSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type referenceDim(referenceDimSEXP);
    rcpp_result_gen = Rcpp::wrap(randomSubspaceSliceC(indexMap, subspace, alpha, referenceDim));
    return rcpp_result_gen;
END_RCPP
}
// averageDeviationC
double averageDeviationC(NumericMatrix indexMap, NumericVector subspace, double alpha, int referenceDim, int numRuns);
RcppExport SEXP subcon_averageDeviationC(SEXP indexMapSEXP, SEXP subspaceSEXP, SEXP alphaSEXP, SEXP referenceDimSEXP, SEXP numRunsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subspace(subspaceSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type referenceDim(referenceDimSEXP);
    Rcpp::traits::input_parameter< int >::type numRuns(numRunsSEXP);
    rcpp_result_gen = Rcpp::wrap(averageDeviationC(indexMap, subspace, alpha, referenceDim, numRuns));
    return rcpp_result_gen;
END_RCPP
}
// deviationVectorC
NumericVector deviationVectorC(NumericMatrix indexMap, NumericVector subspace, double alpha, int referenceDim, int numRuns);
RcppExport SEXP subcon_deviationVectorC(SEXP indexMapSEXP, SEXP subspaceSEXP, SEXP alphaSEXP, SEXP referenceDimSEXP, SEXP numRunsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subspace(subspaceSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type referenceDim(referenceDimSEXP);
    Rcpp::traits::input_parameter< int >::type numRuns(numRunsSEXP);
    rcpp_result_gen = Rcpp::wrap(deviationVectorC(indexMap, subspace, alpha, referenceDim, numRuns));
    return rcpp_result_gen;
END_RCPP
}
// deviationStatisticsC
List deviationStatisticsC(NumericMatrix indexMap, double alpha, int numRuns);
RcppExport SEXP subcon_deviationStatisticsC(SEXP indexMapSEXP, SEXP alphaSEXP, SEXP numRunsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type numRuns(numRunsSEXP);
    rcpp_result_gen = Rcpp::wrap(deviationStatisticsC(indexMap, alpha, numRuns));
    return rcpp_result_gen;
END_RCPP
}
// HiCSContrastC
double HiCSContrastC(NumericMatrix indexMap, NumericVector subspace, double alpha, int numRuns);
RcppExport SEXP subcon_HiCSContrastC(SEXP indexMapSEXP, SEXP subspaceSEXP, SEXP alphaSEXP, SEXP numRunsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subspace(subspaceSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type numRuns(numRunsSEXP);
    rcpp_result_gen = Rcpp::wrap(HiCSContrastC(indexMap, subspace, alpha, numRuns));
    return rcpp_result_gen;
END_RCPP
}
// deviationMatrixC
NumericMatrix deviationMatrixC(NumericMatrix indexMap, double alpha, int numRuns);
RcppExport SEXP subcon_deviationMatrixC(SEXP indexMapSEXP, SEXP alphaSEXP, SEXP numRunsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type numRuns(numRunsSEXP);
    rcpp_result_gen = Rcpp::wrap(deviationMatrixC(indexMap, alpha, numRuns));
    return rcpp_result_gen;
END_RCPP
}
// HiCSMatrixC
NumericMatrix HiCSMatrixC(NumericMatrix indexMap, double alpha, int numRuns);
RcppExport SEXP subcon_HiCSMatrixC(SEXP indexMapSEXP, SEXP alphaSEXP, SEXP numRunsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type numRuns(numRunsSEXP);
    rcpp_result_gen = Rcpp::wrap(HiCSMatrixC(indexMap, alpha, numRuns));
    return rcpp_result_gen;
END_RCPP
}
// HiCSSearch
List HiCSSearch(NumericMatrix indexMap, double alpha, int numRuns, int topkSearch, int topkOutput, int seed);
RcppExport SEXP subcon_HiCSSearch(SEXP indexMapSEXP, SEXP alphaSEXP, SEXP numRunsSEXP, SEXP topkSearchSEXP, SEXP topkOutputSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type numRuns(numRunsSEXP);
    Rcpp::traits::input_parameter< int >::type topkSearch(topkSearchSEXP);
    Rcpp::traits::input_parameter< int >::type topkOutput(topkOutputSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(HiCSSearch(indexMap, alpha, numRuns, topkSearch, topkOutput, seed));
    return rcpp_result_gen;
END_RCPP
}
// reverseNearestNeighborsC
Rcpp::List reverseNearestNeighborsC(arma::mat knn);
RcppExport SEXP subcon_reverseNearestNeighborsC(SEXP knnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type knn(knnSEXP);
    rcpp_result_gen = Rcpp::wrap(reverseNearestNeighborsC(knn));
    return rcpp_result_gen;
END_RCPP
}
// reachability
NumericVector reachability(NumericMatrix knnIndex, NumericMatrix knnDistance, NumericVector maxkIdx);
RcppExport SEXP subcon_reachability(SEXP knnIndexSEXP, SEXP knnDistanceSEXP, SEXP maxkIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type knnIndex(knnIndexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type knnDistance(knnDistanceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxkIdx(maxkIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(reachability(knnIndex, knnDistance, maxkIdx));
    return rcpp_result_gen;
END_RCPP
}
// lofCalculation
NumericVector lofCalculation(NumericVector lrd, NumericMatrix knnIndex, NumericVector maxkIdx);
RcppExport SEXP subcon_lofCalculation(SEXP lrdSEXP, SEXP knnIndexSEXP, SEXP maxkIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lrd(lrdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type knnIndex(knnIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxkIdx(maxkIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(lofCalculation(lrd, knnIndex, maxkIdx));
    return rcpp_result_gen;
END_RCPP
}
// GMD
std::vector<NumericVector> GMD(NumericMatrix indexMap, double alpha, int numRuns, int seed);
RcppExport SEXP subcon_GMD(SEXP indexMapSEXP, SEXP alphaSEXP, SEXP numRunsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indexMap(indexMapSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type numRuns(numRunsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(GMD(indexMap, alpha, numRuns, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"subcon_KSTestC", (DL_FUNC) &subcon_KSTestC, 2},
    {"subcon_randomSubspaceSliceC", (DL_FUNC) &subcon_randomSubspaceSliceC, 4},
    {"subcon_averageDeviationC", (DL_FUNC) &subcon_averageDeviationC, 5},
    {"subcon_deviationVectorC", (DL_FUNC) &subcon_deviationVectorC, 5},
    {"subcon_deviationStatisticsC", (DL_FUNC) &subcon_deviationStatisticsC, 3},
    {"subcon_HiCSContrastC", (DL_FUNC) &subcon_HiCSContrastC, 4},
    {"subcon_deviationMatrixC", (DL_FUNC) &subcon_deviationMatrixC, 3},
    {"subcon_HiCSMatrixC", (DL_FUNC) &subcon_HiCSMatrixC, 3},
    {"subcon_HiCSSearch", (DL_FUNC) &subcon_HiCSSearch, 6},
    {"subcon_reverseNearestNeighborsC", (DL_FUNC) &subcon_reverseNearestNeighborsC, 1},
    {"subcon_reachability", (DL_FUNC) &subcon_reachability, 3},
    {"subcon_lofCalculation", (DL_FUNC) &subcon_lofCalculation, 3},
    {"subcon_GMD", (DL_FUNC) &subcon_GMD, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_subcon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
